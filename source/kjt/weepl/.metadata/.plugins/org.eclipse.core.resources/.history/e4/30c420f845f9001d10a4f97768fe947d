package com.weepl.service;

import org.springframework.security.authentication.DisabledException;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.weepl.constant.MemberStatus;
import com.weepl.entity.Member;
import com.weepl.repository.MemberRepository;

import lombok.RequiredArgsConstructor;

@Service
@Transactional
@RequiredArgsConstructor
public class MemberService implements UserDetailsService {
	private final MemberRepository memberRepository;
	
	public Member saveMember(Member member) {
		validateDuplicateMember(member);
		return memberRepository.save(member);
	}

	private void validateDuplicateMember(Member member) {
		Member findMember = memberRepository.findById(member.getId());
		if(findMember != null) {
			throw new IllegalStateException("이미 가입된 회원입니다."); // 이미 가입된 회원의 경우 예외를 발생시킨다.
		}
	}
	
	
	
	@Override
	public UserDetails loadUserByUsername(String id) throws UsernameNotFoundException {
	    Member member = memberRepository.findById(id);
	    if (member == null) {
	        throw new UsernameNotFoundException(id);
	    }
	    
	    // 회원 상태가 "restrict"인 경우 DisabledException 발생
	    if (MemberStatus.RESTRICT.equals(member.getStatus())) {
	        throw new DisabledException("이용이 제한된 회원입니다.");
	    }
	    
	    return User.builder()
	            .username(member.getId())
	            .password(member.getPwd())
	            .roles(member.getRole().toString())
	            .build();
	}

	public boolean checkIdDuplicate(String id) {
		Member findMember = memberRepository.findById(id);
		if(findMember != null) // 이미 admin계정이 있을경우
			return true;
		return false;
	}
}
