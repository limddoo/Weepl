package com.weepl.controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.weepl.dto.MhinfoSearchDto;
import com.weepl.dto.ModMemberInfoDto;
import com.weepl.entity.Member;
import com.weepl.entity.Mhinfo;
import com.weepl.repository.MemberRepository;
import com.weepl.service.AdminService;

import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/admin")
@RequiredArgsConstructor
public class AdminController {
	private final AdminService adminService;
	private final MemberRepository memberRepository;
	private ModMemberInfoDto modMemberInfoDto;

	private final Logger LOGGER = LoggerFactory.getLogger(AdminController.class);
	
	@PostMapping(value = "/modMemberInfo/{memCd}")
	public String modMemberInfo(@Valid ModMemberInfoDto modMemberInfoDto, BindingResult bindingResult, Model model)
			throws Exception {
		if (bindingResult.hasErrors()) {
			return "member/modMemberInfoForm";
		}

		try {
			adminService.updateMember(modMemberInfoDto);
		} catch (IllegalStateException e) {
			model.addAttribute("errorMessage", e.getMessage());
			return "member/modMemberInfoForm";
		}

		model.addAttribute("result", "수정이 완료되었습니다!");
		return "redirect:/admin/memberList";
	}

	@GetMapping(value = "/modMemberInfo/{memCd}")
	public String modMemberInfoForm(@PathVariable("memCd") Long memCd, Model model) {
		Optional<Member> optionalMember = adminService.findOne(memCd);
		if (optionalMember.isPresent()) {
			Member member = optionalMember.get();
			ModMemberInfoDto modMemberInfoDto = ModMemberInfoDto.of(member);
			model.addAttribute("modMemberInfoDto", modMemberInfoDto);
		} else {
			// 처리할 로직 추가 (멤버를 찾을 수 없는 경우)
			model.addAttribute("errorMessage", "멤버를 찾을 수 없습니다."); // 에러 메시지 설정
			return "redirect:/admin/memberList";
		}
		return "member/modMemberInfoForm";
	}

	@GetMapping("/deleteMember/{memCd}")
	public String deleteMemberInfo(@PathVariable("memCd") Long memCd, Model model) throws Exception {
		adminService.deleteMember(memCd);
		return "redirect:/admin/memberList";
	}

	@GetMapping("/restrictMember/{memCd}")
	public String restrictMember(@PathVariable("memCd") Long memCd, Model model) throws Exception {
		adminService.restrictMemberForOneWeek(memCd);
		return "redirect:/admin/memberList";
	}

	@PostMapping("/restrictMember/{memCd}")
	public ResponseEntity<String> restrictMember(@PathVariable("memCd") Long memCd) {
	    adminService.restrictMemberForOneWeek(memCd);
	    return ResponseEntity.ok("회원이 제한되었습니다.");
	}

	@PostMapping("/{memCd}/cancel-restriction")
    public ResponseEntity<String> cancelMemberRestriction(@PathVariable("memCd") Long memCd) {
        adminService.cancelMemberRestriction(memCd);
        return ResponseEntity.ok("회원 제한이 해제되었습니다.");
    }
	
	 @GetMapping("/{memCd}/cancel-restriction")
	    public String cancelMemberRestriction(@PathVariable("memCd") Long memCd, Model model) throws Exception {
	        adminService.cancelMemberRestriction(memCd);
	        return "redirect:/admin/reMemberList";
	    }
	 
//	 @GetMapping(value = "/memberList")
//		public String List(Model model) {
//			List<Member> members = adminService.findMembers();
//			model.addAttribute("members", members);
//			
//			return "member/memberList";
//		}
		
		@GetMapping(value = "/reMemberList")
		public String reList(Model model) {
			List<Member> members = adminService.findMembers();
			model.addAttribute("members", members);
			
			return "member/reMemberList";
		}
	 
	 @GetMapping(value = { "/memberList", "/memberList/{page}" })
		public String memberList(MemberSearchDto memberSearchDto, @PathVariable("page") Optional<Integer> page,
				Model model) {
			int pageNumber = page.orElse(0);
			
			if(pageNumber < 0) {
				pageNumber = 0;
			}
			
			Pageable pageable = PageRequest.of(pageNumber, 3);
			Page<Member> memberList = adminService.getUserMhinfoPage(memberSearchDto, pageable);

			// 마지막 페이지인 경우에 대한 처리
			if (pageNumber >= memberList.getTotalPages() && memberList.getTotalPages() > 0) {
				// 현재 페이지를 마지막 페이지로 설정
				pageNumber = memberList.getTotalPages() - 1;
				// 다시 페이지 요청
				pageable = PageRequest.of(pageNumber, 3);
				memberList= adminService.getUserMhinfoPage(memberSearchDto, pageable);
			}
			
			model.addAttribute("memberList", memberList);
			model.addAttribute("memberSearchDto", memberSearchDto);
			model.addAttribute("maxPage", 5);
			return "mhinfo/mhinfoMng";
		}
}
